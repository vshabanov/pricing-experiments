#+STARTUP: indent

* Local-vol, make sure mc/fem match bs with implied vol
** local vol via a grid instead of a symbolic expr
Should be much faster (no hessians and symbolic matrix inversions,
much simpler derivatives and smaller AD dependencies/RAM usage).
Shouldn't loose much precision as we discretize time and spot in FEM
anyway (it could in fact have an even better precision as the
derivative will be computed on the same grid as FEM and can match
FEM calculations better than instantaneous derivative)

--> Most of the RAM is used by the AD tape for local vol functions,
    not by IFT Hessian or matrix inversions.
    For each grid point localVol adds 600 and localVol's adds 1700
    tape elements (comparing to just 24 for impliedVol), so the
    simplification of vol calculation at grid points should give a big
    boost

** extend Expr with @if x ~ y then e1 else e2@
where we differentiate both branches.
We can then safely use SABR
** local vol at t=0?
* refactorings
** cleanup and move smile fitting to VolSurface
** make market indepenent from the input type
* Implied vol smile calibration
** Market conventions
partially ready, need to specify conventions in the vol table instead
of hardcoding them
** BF10/RR10?
** Business day model?
* Fitting of curves and AD?
does IFT works when we have 10 points but only 2-3 model parameters
or when error is >> 0
* Pay on touch fem/mc? Stoping time?
* American FEM and monte carlo???
* Chooser? Asian? TRF?
Uwe says that TRF works even with localvol
* Different model (CEV, SABR, Stochastic, Mixed local-vol & stochastic)
https://thalesians.com/aiovg_videos/uwe-wystrup-mixed-local-volatility-models-for-fx-derivatives/
49:20 -- summary of product-model correspondence

Vanilla/European payoff -- BS + vol interpolation
TRF no barrier -- dupire
1st gen exotics (barrier, discrete barriers) -- local-vol mixture
2nd gen (forward starting barrier, forward strikes, FVAs, cliquets)
  -- local-vol mixture with state transitions
options on realized volatility / variance -- stochastic local vol

lv mix (or MLV) is 10 times faster than SLM.
MLV has randomness at start and then has constant vol term structure
(1D-1W const vol1, 1W-2W const vol2, etc.)
unlike Heston it has no issues with calibration on short tenors where
Heston has not enough volatility. Pure Heston is not recommended.

** Stochastic Monte-Carlo
Andersen scheme,
Quadradic Exponential scheme (Uwe says it prevents process from
jumping below zero,
step size is at least one step a week,
for barriers, PDE is still a method of choice,
for pegged currencies abandon SLV/MLV, and use local-vol with jumps
(Travis Fisher presented it on math finance conference, can't find it)
)
* [MC] variance reduction
* Payoff dependent mesh grading
* [MC][parMap] Chunk jacobians, sumj . parMap grain=1 (jacobian . sum . Map pv path . Chunked gaussian)
will use less RAM even in single threaded case
* [MC] Check logspot (sigma...)<=log (barrier/spot), then we can s0*exp on the
last one to get pv
* [FEM] Check Greeks close to maturity and strike. Plot pv/delta vs spot on
diff maturities (with forward ad, might need -O3)
